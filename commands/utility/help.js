const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require("discord.js");
const config = require("../../config.js");
const musicIcons = require('../../ui/icons/musicicons.js');

module.exports = {
    name: "help",
    description: "Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot v√† danh s√°ch l·ªánh",
    
    async run(client, interaction) {
        await interaction.deferReply();

        // ƒê·ªãnh nghƒ©a c√°c categories v√† commands
        const commands = {
            "üéµ Music Commands": [
                {
                    name: "/play",
                    description: "Ph√°t nh·∫°c t·ª´ YouTube, ho·∫∑c link tr·ª±c ti·∫øp",
                    usage: "/play <t√™n b√†i h√°t ho·∫∑c link>",
                    example: "/play never gonna give you up"
                },
                {
                    name: "/filters",
                    description: "√Åp d·ª•ng hi·ªáu ·ª©ng √¢m thanh cho nh·∫°c ƒëang ph√°t",
                    usage: "/filters <filter_name>",
                    example: "/filters bassboost"
                },
                {
                    name: "üéÆ Music Player Controls",
                    description: `C√°c n√∫t ƒëi·ªÅu khi·ªÉn trong music card:\n‚èÆÔ∏è Previous - B√†i tr∆∞·ªõc ho·∫∑c restart\n‚è∏Ô∏è Pause/Resume - T·∫°m d·ª´ng/ti·∫øp t·ª•c\n‚è≠Ô∏è Skip - B·ªè qua b√†i hi·ªán t·∫°i\nüîÅ Loop - L·∫∑p l·∫°i b√†i/queue\n‚èπÔ∏è Stop - D·ª´ng v√† disconnect\nüîÄ Shuffle - X√°o tr·ªôn h√†ng ƒë·ª£i\nüéõÔ∏è Filters - Menu hi·ªáu ·ª©ng √¢m thanh\nüìã Queue - Xem danh s√°ch ch·ªù\nüìù Lyrics - Hi·ªÉn th·ªã l·ªùi b√†i h√°t\nüîÑ Autoplay - B·∫≠t/t·∫Øt t·ª± ƒë·ªông ph√°t`,
                    usage: "B·∫•m v√†o c√°c n√∫t tr√™n music card",
                    example: "S·ª≠ d·ª•ng buttons khi ƒëang ph√°t nh·∫°c"
                }
            ],
            "‚öôÔ∏è Utility Commands": [
                {
                    name: "/ping",
                    description: "Ki·ªÉm tra ƒë·ªô tr·ªÖ v√† tr·∫°ng th√°i k·∫øt n·ªëi c·ªßa bot",
                    usage: "/ping",
                    example: "/ping"
                },
                {
                    name: "/statistics",
                    description: "Xem th√¥ng tin chi ti·∫øt v·ªÅ bot v√† h·ªá th·ªëng",
                    usage: "/statistics",
                    example: "/statistics"
                },
                {
                    name: "/avatar",
                    description: "Hi·ªÉn th·ªã avatar c·ªßa m·ªôt user",
                    usage: "/avatar [user]",
                    example: "/avatar @username"
                },
                {
                    name: "/help",
                    description: "Hi·ªÉn th·ªã menu h∆∞·ªõng d·∫´n n√†y",
                    usage: "/help",
                    example: "/help"
                }
            ]
        };

        // T·∫°o main help embed
        function createMainEmbed() {
            const totalCommands = Object.values(commands).flat().length;
            
            return new EmbedBuilder()
                .setColor(config.embedColor)
                .setTitle(`üìö ${client.user.username} - H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng`)
                .setDescription(
                    `**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ${client.user.username}!** üéµ\n\n` +
                    `Bot √¢m nh·∫°c chuy√™n nghi·ªáp v·ªõi nhi·ªÅu t√≠nh nƒÉng m·∫°nh m·∫Ω:\n` +
                    `‚Ä¢ **High Quality Music** - √Çm thanh ch·∫•t l∆∞·ª£ng cao t·ª´ Lavalink\n` +
                    `‚Ä¢ **Multiple Sources** - YouTube, Spotify, SoundCloud\n` +
                    `‚Ä¢ **Interactive Controls** - Buttons v√† menu d·ªÖ s·ª≠ d·ª•ng\n` +
                    `‚Ä¢ **Audio Filters** - Nhi·ªÅu hi·ªáu ·ª©ng √¢m thanh ƒë·ªôc ƒë√°o\n\n` +
                    `**üìä Quick Stats:**\n` +
                    `‚Ä¢ **Total Commands:** \`${totalCommands}\`\n` +
                    `‚Ä¢ **Servers:** \`${client.guilds.cache.size}\`\n` +
                    `‚Ä¢ **Active Players:** \`${client.riffy?.players?.size || 0}\`\n\n` +
                    `**üîó Quick Links:**\n` +
                    `[Support Server](${config.SupportServer}) ‚Ä¢ [Bot Invite](${config.SupportServer})`
                )
                .addFields(
                    { name: "üéµ Music Commands", value: `${commands["üéµ Music Commands"].length} commands`, inline: true },
                    { name: "‚öôÔ∏è Utility Commands", value: `${commands["‚öôÔ∏è Utility Commands"].length} commands`, inline: true },
                    { name: "üí° Tips", value: "S·ª≠ d·ª•ng menu b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt", inline: true }
                )
                .setThumbnail(client.user.displayAvatarURL({ size: 1024 }))
                .setFooter({
                    text: `Y√™u c·∫ßu b·ªüi: ${interaction.user.username}`,
                    iconURL: interaction.user.displayAvatarURL({ size: 1024 })
                })
                .setTimestamp();
        }

        // T·∫°o category embed
        function createCategoryEmbed(categoryName) {
            const categoryCommands = commands[categoryName];
            const embed = new EmbedBuilder()
                .setColor(config.embedColor)
                .setTitle(`${categoryName}`)
                .setDescription(`**Danh s√°ch l·ªánh trong category ${categoryName}:**\n`)
                .setThumbnail(client.user.displayAvatarURL({ size: 1024 }))
                .setFooter({
                    text: `${categoryCommands.length} commands ‚Ä¢ Y√™u c·∫ßu b·ªüi: ${interaction.user.username}`,
                    iconURL: interaction.user.displayAvatarURL({ size: 1024 })
                })
                .setTimestamp();

            categoryCommands.forEach((cmd, index) => {
                embed.addFields({
                    name: `${index + 1}. ${cmd.name}`,
                    value: `**M√¥ t·∫£:** ${cmd.description}\n**C√°ch d√πng:** \`${cmd.usage}\`\n**V√≠ d·ª•:** \`${cmd.example}\``,
                    inline: false
                });
            });

            return embed;
        }

        // T·∫°o select menu cho categories
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId("help_select")
            .setPlaceholder("üìÇ Ch·ªçn category ƒë·ªÉ xem chi ti·∫øt...")
            .addOptions([
                {
                    label: "üè† Main Menu",
                    description: "Quay v·ªÅ trang ch√≠nh",
                    value: "main",
                    emoji: "üè†"
                },
                {
                    label: "Music Commands",
                    description: "L·ªánh ƒëi·ªÅu khi·ªÉn nh·∫°c",
                    value: "music",
                    emoji: "üéµ"
                },
                {
                    label: "Utility Commands", 
                    description: "L·ªánh ti·ªán √≠ch v√† th√¥ng tin",
                    value: "utility",
                    emoji: "‚öôÔ∏è"
                }
            ]);

        const selectRow = new ActionRowBuilder().addComponents(selectMenu);

        // G·ª≠i main embed (ch·ªâ c√≥ select menu)
        await interaction.editReply({
            embeds: [createMainEmbed()],
            components: [selectRow]
        });

        // Collector cho interactions
        const filter = (i) => i.user.id === interaction.user.id;
        const collector = interaction.channel.createMessageComponentCollector({
            filter,
            time: 300000 // 5 minutes
        });

        collector.on('collect', async (i) => {
            if (i.isStringSelectMenu() && i.customId === 'help_select') {
                await i.deferUpdate();
                
                const value = i.values[0];
                let embed;

                switch (value) {
                    case 'main':
                        embed = createMainEmbed();
                        break;
                    case 'music':
                        embed = createCategoryEmbed("üéµ Music Commands");
                        break;
                    case 'utility':
                        embed = createCategoryEmbed("‚öôÔ∏è Utility Commands");
                        break;
                    default:
                        embed = createMainEmbed();
                        break;
                }

                await i.editReply({ embeds: [embed] });
            }
        });

        collector.on('end', async () => {
            try {
                const message = await interaction.fetchReply();
                const disabledSelectMenu = StringSelectMenuBuilder.from(selectMenu).setDisabled(true);

                await message.edit({
                    components: [new ActionRowBuilder().addComponents(disabledSelectMenu)]
                });
            } catch (error) {
                // Message might be deleted, ignore error
            }
        });
    }
};
